// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  email            String        @unique
  username         String        @unique
  name             String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  image            UserImage?
  password         Password?
  notes            Note[]
  roles            Role[]
  sessions         Session[]
  connections      Connection[]
  bio              String?
  preferredGenres  Genre[]       @relation("userGenres")
  books            Book[]
  swapRequests     SwapRequest[]
  sentMessages     Message[]     @relation("sentMessages")
  receivedMessages Message[]     @relation("receivedMessages")
  writtenReviews   Review[]      @relation("writtenReviews")
  receivedReviews  Review[]      @relation("receivedReviews")
  Traffic          Traffic[]
}

model Genre {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("userGenres")
  books Book[] @relation("bookGenres")
}

model Book {
  id               String        @id @default(uuid())
  title            String
  author           String
  genreId          String // Foreign key for Genre
  conditionId      String // Foreign key for BookCondition
  statusId         String // Foreign key for BookStatus
  userId           String // Foreign key for User
  genre            Genre         @relation("bookGenres", fields: [genreId], references: [id])
  description      String?
  condition        BookCondition @relation(fields: [conditionId], references: [id])
  status           BookStatus    @relation(fields: [statusId], references: [id])
  createdAt        DateTime      @default(now())
  user             User          @relation(fields: [userId], references: [id])
  smallImageURL    String
  goodreadsId      Int
  goodreadsRating  Int
  goodreadsRatings Int
  publicationYear  Int?
  swapRequests     SwapRequest[]
}

model BookStatus {
  id    String @id @default(uuid())
  name  String @unique
  books Book[]
}

model BookCondition {
  id    String @id @default(uuid())
  name  String @unique
  books Book[]
}

model SwapRequest {
  id        String            @id @default(uuid())
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [id], references: [id])
  book      Book              @relation(fields: [id], references: [id])
  status    SwapRequestStatus @relation(fields: [id], references: [id])
}

model SwapRequestStatus {
  id       String        @id @default(uuid())
  name     String        @unique // 'Pending', 'Accepted', 'Declined'
  requests SwapRequest[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation("sentMessages", fields: [id], references: [id])
  receiver  User     @relation("receivedMessages", fields: [id], references: [id])
}

model Review {
  id           String   @id @default(uuid())
  rating       Int
  comment      String?
  createdAt    DateTime @default(now())
  reviewer     User     @relation("writtenReviews", fields: [id], references: [id])
  reviewedUser User     @relation("receivedReviews", fields: [id], references: [id])
}

model Note {
  id      String @id @default(uuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(uuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(uuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(uuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(uuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(uuid())
  providerName String
  providerId   String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
  @@unique([providerId, userId])
}

model Traffic {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  type      String
  user      User    @relation(fields: [userId], references: [id])
  ip        String?
  userAgent String?
  userId    String
}
